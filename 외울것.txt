★단축키
- shift+alt+f = prettier 자동정렬
- ctrl + ? = 해당블록주석

★설정
- src와 동일한 디렉토리에 .prettierrc 파일을 생성후 아래처럼 입력
{
        "singleQuote": true,
        "semi": true,
        "useTabs": false,
        "tabWidth": 4
}
- 저장할때마다 자동 들여쓰기 : 파일 > 기본설정 > 설정 > 검색박스에 format on save 검색해서, 체크

★규칙
- 컴포넌트에서 undefined 를 반환하면, 에러난다. jsx 에서 undefined를 출력하는 것은 괜찮다.
- jsx에서 닫는 태그가 없는 경우나, 자식요소가 없는 빈 태그는 셀프클로저를 사용하면 된다.
- 클래스형 컴포넌트는 render() 함수가 꼭 있어야 하고, jsx를 반환해야 한다.
- 클래스형 컴포넌트는 state, 라이프사이클기능을 사용할 수 있고, 임의 메서드를 정의할 수 있다.
함수형에서는 못쓰지만, hooks를 통해 비슷하게 구현할 수 있다.
- 클래스형 컴포넌트의 state 초기값은 객체형식이어야 한다. setState 로 업데이트가 가능하다.
- 함수형에서 state를 사용하려면, useState 를 사용한다. 초기값은 객체가 아니어도 된다.
- props로 받아온 값은 컴포넌트가 읽기만 가능하고, 변경할 수 없다. 값을 변경할때는 state, setState를 사용한다. 함수형은 useState
- setState 두번째 인자로 함수를 추가하면, setState가 끝난후 동작을 추가할 수 있다.
- propTypes 종류 : array, arrayOf, bool, func, number, object, string, symbol, node, instanceOf, oneOf, oneOfType, objectOf, shape, any
- render 에서는 아무것도 반환할게 없으면, false 나 null을 반환해야 함
- 배열이나 객체에 대한 업데이트를 하려면, 사본을 만들어서 사본에 업데이트 한다.
- 이벤트는 돔 요소에만 설정할 수 있고, 컴포넌트에는 설정할 수 없다.
- 이벤트 실행후, 일정 시간이 흐르고, 이후 실행되는 함수에서 e 객체를 참조할 일이 있으면, e.persist(); 함수를 한줄 써줘야 한다.
- 메서드 바인딩은 생성자에서 하는게 정석이나, 바벨에서 transform-class-properties 문법을 사용하여 화살표 함수 형태로 메서드를 정의할수 있다.
- dom에 값을 주거나 변경하는 것은 state, props 로 가능하지만 dom을 조작할때는 ref를 사용한다. input에 포커스, 스크롤박스 조작, canvas 그림그리기 등...
- 콜백으로 ref 설정 : <input ref={(ref) => {this.명칭 = ref}} /> 했을때, this.명칭은 해당 dom 요소를 가리킨다. 결과 <input ref={this.명칭}> 이 되므로,
어떤 이벤트 호출부에서 this.명칭.focus() 와 같은 수행이 가능해진다.
- 16.3 이후 버전에서 createRef 를 사용하는데, 편한 방법으로 사용하면 된다.
- 컴포넌트에도 ref를 달 수 있다. 컴포넌트 외부에서 내부에 있는 dom에 접근할때 쓴다. dom과 동일하게 설정하면 된다.
- 컴포넌트에 ref를 달면, 내부의 이벤트나 dom에 접근할 수 있다. (myComponent.handleClick , myComponent.wrapElement 식으로...)
- 서로 다른 컴포넌트끼리 ref를 통해 데이터를 전달하지 말 것. 잡채된다.
- 비구조화 문법은 es6 에서 도입된 문법이다. (babel 환경 또는 es6 지원되는 브라우저에서만 사용할것)
- 배열.map() 은 es5에 도입되었는데, 콜백 뒤에 붙는 파라미터는 어케쓰는지 모르겠다.
- map() 은 새로운 배열로 재구성해서 새로운 변수에 할당하기 때문에, 값을 변경하더라도 참조 방식이 아니므로 원본에 변경이 일어나지 않는다.
- push 함수는 기존의 배열을 변경하고, concat() 은 새로운 배열을 만들어준다.
- 리액트에서 상태를 업데이트할때는 기존 상태를 그대로 두면서 새로운 값을 상태로 설정해야 한다. 이를 불변성 유지라고 한다. (성능최적화를 위해...)
- key 값이 중복되면 오류난다.
- 라이프 사이클 메서드중 will 접두사가 붙은것은 어떤 작업을 작동하기전 메서드이고, did는 작동후 메서드이다. (마운트, 업데이트, 언마운트)
- 마운트 = 돔이 생성되고, 브라우저에 나타났을때가 마운트
- 컴포넌트는 네가지 경우에 업데이트한다. (props가 바뀔때, state가 바뀔때, 부모 컴포넌트가 리렌더링 될때, this.forceUpdate로 강제로 렌더링을 트리거할때)
- props의 값이 바뀌면 컴포넌트 렌더링이 이루어진다.
- 컴포넌트가 들고 있는 state가 setState를 통해 업데이트 될때, 컴포넌트가 업데이트 된다.
- 부모 컴포넌트가 리렌더링 되면 자식 컴포넌트도 리렌더링 된다.
- getDerivedStateFromProps(nexpProps, prevState){} = props에 있는 값을 state도 바뀌게 하고 싶을때 사용하는 메서드
- shouldComponentUpdate(nextProps, nextState) = 컴포넌트가 리렌더링을 할지, 말지 결정하는 메서드. false를 반환하면 작업을 중지하고
컴포넌트가 리렌더링 되지 않음. 특정 함수에서 this.forceUpdate() 를 호출하면, 이 과정을 생략하고 바로 render를 호출함.
(this.props, this.state로 접근하고, 새로 설정할땐 nextProps와 nextState로 접근할 수 있다.)
- render = 컴포넌트를 리렌더링 함(필수)
- getSnapshotBeforeUpdate(prevProps, prevState){} = 컴포넌트 변화를 dom에 반영하기 바로 직전 호출하는 메서드
- componentDidMount = 컴포넌트가 웹 브라우저에 나타난 후 호출하는 메서드
- ComponentWillUnmount = 컴포넌트가 브라우저에서 사라지기전 호출하는 메서드
- render 안에서는 setState를 사용하면 안되고, dom 에 접근해서도 안된다. 그건 componentDidMount 에서 처리해야 한다.
- componentDidUpdate(prevProps, prevState, snapShot){} = 리렌더링 완료후 실행됨. 컴포넌트가 이전에 가졌던 값을 읽을 수 있고,
getSnapshotBeforeUpdate 에서 반환한 값이 있으면, 여기서 snapshot 값을 전달받을 수 있다.
- componentWillUnmout(){} = 컴포넌트를 dom에서 제거할때 실행함. componentDidMount 에서 등록한 이벤트, 타이머, 생성한 dom 있으면 여기서 제거하면 됨.
- componentDidCatch(error, info){} = 렌더링 도중 에러가 발생했을때, 먹통이 되지 않고 오류 UI를 보여줌.
- 함수형에서 useEffect() 는 첫렌더링이 끝났을때와, 업데이트가 끝났을때 호출된다. 그러나 마운트 되었을때만 호출되게 하려면,
useEffect( ( ) => {}, [] ) 두번째 인자로 빈 배열을 넘겨주면 된다. 별도의 처리를 할 게 있을때 사용하면 됨.
특정값이 바뀔때만 호출하려면, 빈 배열안에 검사하고 싶은 값을 넣어주면 된다. 배열안에는 useState를 통해 관리되고 있는 상태나 props로 받은 값을 넣어도 된다.
- useReducer(otherFunc, {default : 11}) = 첫번째 파라미터는 호출할 함수, 두번째는 해당 리듀서의 기본값
useState 를 사용할때와 비슷하게, const [aa, bb] = useReducer(함수, 기본값) 설정한후, bb를 사용하면 리듀서에 정의된 함수를 호출할 수 있다.
기본값과 같은 형태의 데이터 구조를 파라미터로 던지면,  리듀서에 정의된 함수 구조에 따라 case별 리턴값을 받아온다.
- useReducer의 장점은, 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼수 있다.
- useReducer에서 호출되는 함수의 action parameter 에는 그 어떤값이 넘어와도 무방하니, 자유롭게 네이밍 하면 된다.
- useMemo 를 사용하면, 함수형 컴포넌트 내부에서 발생하는 연산을 최적화 할 수 있다.
const avg = useMemo( () => getAverage(list), [list]); = list 배열의 내용이 바뀔때만 호출되는 용도로 씀
- Array.reduce((accumulater, currentValue, index, src) => {}, 초기값) = 총 4개의 인자와 초기값을 받을 수 있다. 보통 배열 원소들의 총합을 구하거나,
초기값을 넘길경우 이것까지 합쳐서 총합을 리턴하는 용도로 쓰지만, 활용할 수 있는 곳이 많다.
- on이벤트 핸들러는 렌더링 될때마다 이 함수들이 새로 생성된다. 렌더링 횟수가 많거나 컴포넌트 갯수가 많아지면, useCallback 으로 사용해서 최적화한다.
- useCallback((e) => {}, []); = 컴포넌트가 처음 렌더링될때만 함수 생성한다.
- useCallback((e) => {}, [list, number]); = list 혹은 number가 바뀌었을때만 함수 생성한다.
- useCallback은 함수를 재사용할 경우 사용하고, 문자 숫자 객체처럼 일반 값을 재사용할 경우 useMemo 를 사용한다.
- es6 에서 도입된 템플릿 리터럴 표기법(` 문자는 백틱이라고 부른다.) let a = 1; console.log(`aaaa${a}`); => 결과 : aaaa1
- sass : 해당 프로젝트내에서 yarn add node-sass 설치후, scss 파일을 작성하여 import 하면 된다. (import 명칭 from '경로';) 설치후에는 서버를 재시작 해야 한다.
- utils 함수를 분리할때는 scss 파일내에서 @import '경로/파일명'; (확장자는 생략해도됨)
- sass-loader 커스터마이징 하려면, 웹팩에서 sass-loader의 설정을 커스터마이징 해야 한다. config 파일을 불러내기 전에 현재 변경사항들을 모두 커밋해야 한다.
- $ git add . => $ git commit -m "메세지" => $ yarn eject => $ react-scripts eject => y
- config 파일이 생겼고, webpack.config.js 에서 sassRegex 키워드를 찾아서 'sass-loader-를 주석치고, 그 위의 use 프로퍼티를 닫고 concat 으로 추가 설정을 작성한다. (293페이지 참고)
- 라이브러리 설치할때는 $ yarn add open-color include-media 와 같이 $ yarn add 명칭을 사용한다.
- CSS Module 을 설치하여 사용하면 클래스의 중복을 피할 수 있다. (협업시 일만 많아지고 번거로워질듯... 원시코드가 최고)
- classnames 라이브러리 설치시 $ yarn add classnames (이것도 쓸데없는짓 같다. 스타일을 왜 이렇게 병신같이 쓰나...)
- css 스타일링 결론 : 다른놈이 작업한거 손대야 할 때 필요하니, 알아두는건 좋지만 내가 사용하는건 병신같은 짓이다.




